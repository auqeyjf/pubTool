

/*

Title: hyperRealCorrectiveShape.mel

Author: Erick Miller

Requires: 
	Just this script :-)
	
Install/User Directions:

	Copy this script into one of the folders in your MAYA_SCRIPT_PATH
	ie, on Windows: C:/Documents and Settings/$USER/My Documents/maya/scripts/
	then, launch Maya, & optionally source it using the source command. 

	For interactive use, simply run this UI(ie):
	The UI buttons have tool tips which should be pretty good 
	explanations of what to do next:
	
		source "hyperRealCorrectiveShapw.mel";
		hyperRealCorrectiveShapeWin(); // will launch the UI

Description:

	This is an advanced script that will allow you model in the shapes 
	for your skin cluster deformations. You use it by first duplicating your
	deformed mesh when it is in the deformed pose that you want to model it to 
	look better at.  After you are done modeling you apply this model back onto 
	the deforming geometry by hitting a button in the UI, or using one of the 
	2 scripted functions:

	hyperRealCorrectiveShape() ; //based on selection

	hyperRealCorrectiveShapeCmd( string $modeledObj, string $deformingObj ) ;

	This mel script's useful functionality works by creating a couple blendshapes
	and actually replicating the bind on a new skin cluster so that the offset
	vectors that come out of the blend shape end up post deforming properly,
	by hijacking the skinCluster's bindPreMatrix[] attributes, and setting them
	so that the bind begins from the current posed state.
	Check out the code, its all in MEL, no need for a plugin, & it's pure
	interactive and fairly fast corrective shaping fun.
	
*/

// simple ui code:
global proc hyperRealCorrectiveShapeWin()
{
	int $w= 220;
	int $h= 195;
	if(`window -ex hrCrtvShpWin`){ deleteUI hrCrtvShpWin; }
	if(`windowPref -ex hrCrtvShpWin`){ 
		int $xy[] = `windowPref -q -tlc hrCrtvShpWin`;
		windowPref -e -w $w -h $h hrCrtvShpWin; 
		windowPref -e -tlc $xy[0] $xy[1] hrCrtvShpWin;
	}
	window -w $w -h $h -title ("hyperRealCorrectiveShapes") -s 0 hrCrtvShpWin;
	int $bw = 180;
	int $bh = 25;
	columnLayout -co "both" 5 -cw 5;
	text "Frist, Duplicate Deforming Mesh:";
	button -w $bw -h $bh  -ann "A Clean Duplicate to Begin Fix Modeling From. Select skinned model, & hit this button to begin." -label "Clean Duplicate."
	-c ("hrCleanDuplicate();");
	text "Then, when done modeling...";
	button	-w $bw -h $bh
	-ann "Apply Modeled Geometry to Deforming Skin! Select model first and skinned geom second."
	-label "Apply Shape!"
	-c ("hyperRealCorrectiveShape();");
	text "Later on, to get back to a pose...";
	button	-w $bw -h $bh
	-ann "Select modeled fix shape, and click this to make the joints go back to that modeled pose (a pose was saved for your convienince)."
	-label "Select Model, Go To Pose..."
	-c ("{string $sel[] = `ls -sl`; string $dgpn[] = `listConnections -type dagPose ($sel[0]+\".ihi\")`; dagPose -restore $dgpn[0];}");
	text "Now, drive the shape using a joint...";
	button	-w $bw -h $bh
	-ann "Select driver joint then hyperreal applied model, and hit this button."
	-label "Apply Pose Driver!"
	-c ("hyperRealDrivePoseAttrButtonCmd();");
	showWindow;

}


/////->

// Util function: classic case of reversed deformer switcheroo:
//
global proc string[] cloneSkinCluster( string $skinCluster, string $geom, string $name ){
	delete -ch $geom ;
	string $newSkinBind[] = `duplicate -ic -name ($name+"#") $skinCluster`;
	select -cl; select `ls -o $newSkinBind`; select -d `ls -o -type objectSet -type skinCluster -type mesh`; 
	string $ro[] = `ls -ro`; if(`size $ro`){  select -d $ro;  }
	if(size(`ls -sl -o -type dagPose`)){ 
		delete `ls -sl -o -type dagPose`;
	}
	$newSkinBind = `ls -type skinCluster $newSkinBind`;
	string $clonedSkinCluster[] = `deformer -name $name -type skinCluster $geom`;
	string $connected[] = `listConnections -s 1 -d 0 -p 1 ($geom+".inMesh")` ;
	disconnectAttr $connected[0] ($geom+".inMesh") ;
	string $tweaker[] = ls("-type","tweak",`listHistory -gl 1 $clonedSkinCluster[0]`);
	if(`size $tweaker` && !size(`ls -ro $tweaker`) ){ delete $tweaker[0] ; }
	string $attrName ;
	string $incoming[] = `listConnections -s 1 -d 0 -p 1 -c 1 $clonedSkinCluster[0]`; //1->0
	int $i=0;
	for($i=0;$i<size($incoming)-1; $i+=2){
		disconnectAttr $incoming[$i+1] $incoming[$i];
		$attrName = `match "\\..*" $incoming[$i]`;
		connectAttr -f $incoming[$i+1] ($newSkinBind[0]+$attrName);
	}
	string $outgoing[] = `listConnections -s 0 -d 1 -p 1 -c 1 $clonedSkinCluster[0]`; //0->1
	for($i=0;$i<=size($outgoing)-1; $i+=2){
		disconnectAttr $outgoing[$i] $outgoing[$i+1];
		$attrName = `match "\\..*" $outgoing[$i]`;
		connectAttr -f ($newSkinBind[0]+$attrName) $outgoing[$i+1];
	}
	if(!size(`ls -ro $clonedSkinCluster`)){
		delete $clonedSkinCluster ;
	}
	string $ioObj[] = (ls("-type","mesh","-io",`listHistory -gl 1 $newSkinBind[0]`));
	string $gpCon[] = `listConnections -s 0 -d 1 -type groupParts -p 1 ($ioObj[0]+".worldMesh")`;
	evalEcho("connectAttr -f "+$geom+".worldMesh "+$gpCon[0]) ;
	if(!size(`ls -ro $ioObj`)){
		delete $ioObj ;
	}
	return( $newSkinBind );
}

//
// Here's the juicy meat, so dig your teeth & taste the mad flava':
//
global proc hyperRealCorrectiveShapeCmd( string $modeledObj, string $deformingObj ){
	if(`objExists ($modeledObj+".HYPER_BLEND")`){
		string $bs[] =`listConnections -s 0 -d 1 -type blendShape ($modeledObj+".HYPER_BLEND")`;
		if(size($bs)){
			print "\n\n\n\n\n";
			warning "This model is already connected. To disconnect it, first delete the blend shape node:\n";
			print $bs; print ("Then delete history and all incoming connections to: "+$modeledObj+"\n");
			error "Your model is already applied & active. See script editor for details.";
		}
	}
	string $sc[] = ls("-type","skinCluster",`listHistory -gl 1 -il 2 $deformingObj`);
	string $skinCluster = $sc[0];
	if(!`objExists $skinCluster`){ error "You must have geometry bound to a smooth skin cluster as the deforming object.";  }
	delete -ch $modeledObj;
	string $mdlParent[] = listRelatives( "-p", "-f", (ls("-type", "mesh", "-ni", "-l", (`listHistory -gl 1 $modeledObj`)) ) );
	string $ios[] = ls("-io","-l","-type","mesh","-type","nurbsSurface",`listRelatives -s -c -f $mdlParent[0]`);
	if(`size $ios` && !size(`ls -ro $ios`) ){ print "\n\n"; print $ios; print "\n\n"; delete $ios; }
	delete -ch $mdlParent ;
/*
	string $schwagWeGottaSmoke[] = listConnections(`listRelatives $mdlParent`);
	string $moreSchwag[] = listHistory("-future",1,"-pdo",1,(`listRelatives $mdlParent`) );
	for($schwag in $moreSchwag){ $schwagWeGottaSmoke[`size $schwagWeGottaSmoke`] = $schwag; }
	for($oldSchwag in $schwagWeGottaSmoke){
		if(`objExists $oldSchwag` && size(`ls $oldSchwag`) ){
			 if(`nodeType $oldSchwag` != "shadingEngine"){ 
			 	if(!size(`ls -ro $oldSchwag`) ){
					catch(evalEcho("delete "+$oldSchwag));
				}
			 }
		}
	}
*/
	string $dp[] = `listConnections -s 0 -d 1 -type dagPose $modeledObj`;
	if(`size $dp` && !size(`ls -ro $dp`) ){ delete $dp; }
	string $negativeGeo[] = `duplicate -rr $deformingObj`;
	string $newSkinBind[] = cloneSkinCluster( $skinCluster, $modeledObj, "reverseBindModel" );
	string $newSkinBind2[] = cloneSkinCluster( $newSkinBind[0], $negativeGeo[0], "reverseBindSkin" );
	string $jntMatrixAttrs[] = `listConnections -s 1 -d 0 -p 1 ($skinCluster+".matrix")`;
	for($jntMtxAttr in  $jntMatrixAttrs){
		string $jntMatrix[] = `listConnections -s 0 -d 1 -p 1 $jntMtxAttr`;
		string $ninjaStealthMatrix="";
		for($jntMx in $jntMatrix){
			if( size(`match ($skinCluster+".matrix\\[[0-9]+\\]") $jntMx`) ){
				$ninjaStealthMatrix = $jntMx;
				break;
			}
		}
		if(`size $ninjaStealthMatrix`){
			int $matrix_index = substitute( "\\]$", ((string)`match "[0-9]+\\]$" $ninjaStealthMatrix`), "");
			string $node[] = `ls -o $jntMtxAttr`;
			dgdirty ($node[0]+".worldInverseMatrix[0]");
			float $m[16] = `getAttr ($node[0]+".worldInverseMatrix[0]")`;
			print "// When I'm high on crack, the matrix magic happens...\n";
			evalEcho( "setAttr "+$newSkinBind[0]+".bindPreMatrix["+$matrix_index+"] "+ 
				"-type \"matrix\" "+$m[0]+" "+$m[1]+" "+$m[2]+" "+$m[3]+" "+
						$m[4]+" "+$m[5]+" "+$m[6]+" "+$m[7]+" "+
						$m[8]+" "+$m[9]+" "+$m[10]+" "+$m[11]+" "+
						$m[12]+" "+$m[13]+" "+$m[14]+" "+$m[15] );
			print "// When I'm high on crack...\n";
			evalEcho( "setAttr "+$newSkinBind2[0]+".bindPreMatrix["+$matrix_index+"] "+ 
				"-type \"matrix\" "+$m[0]+" "+$m[1]+" "+$m[2]+" "+$m[3]+" "+
						$m[4]+" "+$m[5]+" "+$m[6]+" "+$m[7]+" "+
						$m[8]+" "+$m[9]+" "+$m[10]+" "+$m[11]+" "+
						$m[12]+" "+$m[13]+" "+$m[14]+" "+$m[15] );
			
		}
	}
	string $name = `substitute "^[^.]*|" $modeledObj ""`;
	string $blendShape[] = `blendShape 
				-name ("hyperBlend_"+$name)
				-weight 0 -1 -weight 1 1 
				-parallel  $negativeGeo[0] $modeledObj $deformingObj`;
	aliasAttr -rm ($blendShape[0]+".weight[0]");
	aliasAttr -rm ($blendShape[0]+".weight[1]");
	setAttr -lock true ($blendShape[0]+".weight[0]");
	setAttr -lock true ($blendShape[0]+".weight[1]");
	string $connectedTo1[] = `listConnections -s 0 -d 1 -p 1 ($modeledObj+".worldMesh")` ;
	string $connectedTo2[] = `listConnections -s 0 -d 1 -p 1 ($negativeGeo[0]+".worldMesh")`;
	connectAttr -f ($modeledObj+".worldMesh") ($newSkinBind[0]+".input[0].inputGeometry")  ;
	connectAttr -f ($negativeGeo[0]+".worldMesh") ($newSkinBind2[0]+".input[0].inputGeometry")  ;
	connectAttr -f ($newSkinBind[0]+".outputGeometry[0]") $connectedTo1[0]  ;
	connectAttr -f ($newSkinBind2[0]+".outputGeometry[0]") $connectedTo2[0]  ;
	string $hMsh[] = ls("-type", "mesh", "-ni", (`listHistory -gl 1 $negativeGeo[0]`));
	setAttr ($hMsh[0]+".intermediateObject") true; $hMsh[0] = `rename $hMsh[0] ($modeledObj+"NegativeBaseOrig#")` ;
	parent -r -s $hMsh[0] $modeledObj ;  delete $negativeGeo[0];
	string $savedPose = dagPose( "-name", ($modeledObj+"Pose"),"-save", `ls -o $jntMatrixAttrs` );
	connectAttr ($modeledObj+".ihi") ($savedPose+".ihi") ;	
	if(!`objExists ($modeledObj+".HYPER_BLEND")`){
		addAttr -k 1 -dv 1 -min -10 -max 10 -softMinValue 0 -softMaxValue 1 -ln HYPER_BLEND $modeledObj ;
	}else{
		setAttr -l 0 ($modeledObj+".HYPER_BLEND")  ;
		setAttr ($modeledObj+".HYPER_BLEND") 1;
	}
	connectAttr -f ($modeledObj+".HYPER_BLEND") ($blendShape[0]+".envelope") ;
	select $modeledObj ;
}

//simple util function:
global proc hrCleanDuplicate(){
	string $model[] = `duplicate -rr -renameChildren`;
	$attrs = {"t","tx","ty","tz","r","rx","ry","rz","sx","sy","sz","s","v"};	
	for($attr in $attrs) setAttr -k 1 -l 0 ($model[0]+"."+$attr);
	string $ios2[]= ls("-io","-type","mesh","-type","nurbsSurface",`listRelatives -c $model[0]`);
	string $selected[] = `ls -sl`;
	string $ros[]=`ls -ro`;
	if(`size $ios2`){
		select $ios2 ; 
		if(`size $ros`){ select -d $ros; }
		if(size(`ls -sl`)){ delete `ls -sl`; }	
	}
	select $selected;	
	evalDeferred("setToolTo moveSuperContext;");
}

//wrapper for user based selection/execution via UI:
global proc hyperRealCorrectiveShape(){
	string $sel[] = `ls -sl -o`;
	if(`size $sel` == 2 
	&& size(ls("-type","skinCluster",(`listHistory -gl 1 -pdo 1 $sel[1]`)))
	&& (size(`listRelatives -type mesh $sel[0]`) || size(`ls -type mesh $sel[0]`) )
	&& (size(`listRelatives -type mesh $sel[1]`) || size(`ls -type mesh $sel[1]`) )
	){ 
		evalEcho( "hyperRealCorrectiveShapeCmd "+$sel[0]+" "+$sel[1]+" ;" );
	}else{
		error "Select the modeled object first, and the smooth skinned object second. Only works on polygons." ;
	}
}

global proc string[] buildCoordSys( string $buildInThisSpace , string $parentUnderThisSpace )
{
	string $space = `createNode transform -name "space#"`;
	setAttr .inheritsTransform false;
	string $x = `createNode transform -name "x#" -parent $buildInThisSpace`;
	move -r 1 0 0;
	string $y = `createNode transform -name "y#" -parent $buildInThisSpace`;
	move -r 0 1 0;
	string $z = `createNode transform -name "z#" -parent $buildInThisSpace`;
	move -r 0 0 1;	
	string $p = `createNode transform -name "p#" -parent $buildInThisSpace`;
	move -r 0 0 0;
	parent $p $x $y $z $space;
	parentConstraint -mo $parentUnderThisSpace $x ;
	parentConstraint -mo $parentUnderThisSpace $y ;
	parentConstraint -mo $parentUnderThisSpace $z ;
	parentConstraint  -mo $parentUnderThisSpace $p ;
	return( {$x, $y, $z, $p, $space} );
}

global proc string buildPoseDriverExpression( string $driverJoint, string $drivenAttribute )
{
	string $m1P[] = `listRelatives -p $driverJoint`;
	string $m1[] = buildCoordSys( $driverJoint, $m1P[0] );
	string $m2[] = buildCoordSys( $driverJoint, $driverJoint );

	string $drivenObj[] = `ls -o $drivenAttribute`;
	if(!`objExists ($drivenObj[0]+".poseWeight")`){
		addAttr -ln poseWeight -at double  $drivenObj[0];
	}
	setAttr -e -keyable true ($drivenObj[0]+".poseWeight");
	string $poseWeightAttr = ($drivenObj[0]+".poseWeight");

	string $expressionStr = (
		"vector $vx_orig = << ("+$m1[3]+".tx-"+$m1[0]+".tx), ("+$m1[3]+".ty-"+$m1[0]+".ty), ("+$m1[3]+".tz-"+$m1[0]+".tz) >>; \\n"+
		"vector $vx_curr = << ("+$m2[3]+".tx-"+$m2[0]+".tx), ("+$m2[3]+".ty-"+$m2[0]+".ty), ("+$m2[3]+".tz-"+$m2[0]+".tz) >>; \\n"+
		"$multx = dot( unit($vx_orig), unit($vx_curr)  ); \\n"+
		"$multx = clamp( -1.0, 1.0, $multx) ; \\n"+
		"$multx = 1.0 - linstep(0, 3.14159265, acos($multx) ); \\n\\n"+

		"vector $vy_orig = << ("+$m1[3]+".tx-"+$m1[1]+".tx), ("+$m1[3]+".ty-"+$m1[1]+".ty), ("+$m1[3]+".tz-"+$m1[1]+".tz) >>; \\n"+
		"vector $vy_curr = << ("+$m2[3]+".tx-"+$m2[1]+".tx), ("+$m2[3]+".ty-"+$m2[1]+".ty), ("+$m2[3]+".tz-"+$m2[1]+".tz) >>; \\n"+
		"$multy = dot( unit($vy_orig), unit($vy_curr)  ); \\n"+
		"$multy = clamp( -1.0, 1.0, $multy) ; \\n"+
		"$multy = 1.0 - linstep(0, 3.14159265, acos($multy) ); \\n\\n"+

		"vector $vz_orig = << ("+$m1[3]+".tx-"+$m1[2]+".tx), ("+$m1[3]+".ty-"+$m1[2]+".ty), ("+$m1[3]+".tz-"+$m1[2]+".tz) >>; \\n"+
		"vector $vz_curr = << ("+$m2[3]+".tx-"+$m2[2]+".tx), ("+$m2[3]+".ty-"+$m2[2]+".ty), ("+$m2[3]+".tz-"+$m2[2]+".tz) >>; \\n"+
		"$multz = dot( unit($vz_orig), unit($vz_curr)  ); \\n"+
		"$multz = clamp( -1.0, 1.0, $multz) ; \\n"+		
		"$multz = 1.0 - linstep(0, 3.14159265, acos($multz) ); \\n\\n"+

		$poseWeightAttr+" = $multx * $multy * $multz ; \\n"
	);
	evalEcho("expression -s \""+$expressionStr+"\"");
	setDrivenKeyframe -cd $poseWeightAttr -dv 1 -v 1 $drivenAttribute ;
	setDrivenKeyframe -cd $poseWeightAttr -dv 0 -v 0 $drivenAttribute ;
	string $gp = `group -name "poseNodes#" $m1[4] $m2[4]` ;
	return( $gp );
}


global proc hyperRealDrivePoseAttrButtonCmd()
{
	string $sel[] = `ls -sl -fl`;
	buildPoseDriverExpression( $sel[0], ($sel[1]+".HYPER_BLEND") );
	select $sel[0] ;
}




